import asyncio
import websockets
import json
import sys
import logging
import base64
import tkinter as tk
from PIL import Image, ImageTk
import io
from datetime import datetime
import threading
import queue
import time

class RemoteControllerClient:
    def __init__(self):
        self.websocket = None
        self.client_id = f"controller_{datetime.now().strftime('%H%M%S')}"
        self.connected = False
        self.screen_window = None
        self.control_window = None
        self.asyncio_thread = None
        self.message_queue = queue.Queue()
        self.mouse_control_enabled = False
        self.last_mouse_time = 0
        self.mouse_throttle = 0.033
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        self.scale_params = {
            'offset_x': 0,
            'offset_y': 0,
            'scaled_width': 1920,
            'scaled_height': 1080,
            'scale_ratio': 1.0
        }
        
        self.setup_logging()
        
    def setup_logging(self):
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler("controller.log", encoding='utf-8'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger("RemoteController")

    def create_control_window(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        self.control_window = tk.Tk()
        self.control_window.title(f"–£–¥–∞–ª–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ - {self.client_id}")
        self.control_window.geometry("500x400")
        self.control_window.protocol("WM_DELETE_WINDOW", self.quit_app)
        
        # –°—Ç–∞—Ç—É—Å
        status_frame = tk.Frame(self.control_window)
        status_frame.pack(pady=10, fill=tk.X)
        
        self.status_label = tk.Label(status_frame, text="–°—Ç–∞—Ç—É—Å: –û—Ç–∫–ª—é—á–µ–Ω", fg="red", font=("Arial", 12))
        self.status_label.pack(side=tk.LEFT, padx=10)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∂–∏–º–µ
        mode_label = tk.Label(status_frame, text="–†–µ–∂–∏–º: –í–µ—Å—å —ç–∫—Ä–∞–Ω", fg="green", font=("Arial", 10))
        mode_label.pack(side=tk.RIGHT, padx=10)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_frame = tk.Frame(self.control_window)
        info_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        tk.Label(info_frame, text="–õ–æ–≥ —Å–æ–±—ã—Ç–∏–π:", font=("Arial", 10)).pack(anchor=tk.W)
        self.info_text = tk.Text(info_frame, height=12, width=60)
        scrollbar = tk.Scrollbar(info_frame, command=self.info_text.yview)
        self.info_text.config(yscrollcommand=scrollbar.set)
        self.info_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        self.info_text.insert(tk.END, "–ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n")
        self.info_text.insert(tk.END, "–†–µ–∂–∏–º: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –í–°–ï–ì–û —ç–∫—Ä–∞–Ω–∞ —É–ø—Ä–∞–≤–ª—è–µ–º–æ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞\n")
        self.info_text.insert(tk.END, "–í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –±—É–¥—É—Ç –≤–∏–¥–Ω—ã\n")
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_frame = tk.Frame(self.control_window)
        button_frame.pack(pady=10)
        
        self.screen_btn = tk.Button(button_frame, text="üñ•Ô∏è –ó–∞–ø—Ä–æ—Å–∏—Ç—å —ç–∫—Ä–∞–Ω", 
                                   command=self.request_screen, state=tk.DISABLED,
                                   width=15, height=2)
        self.screen_btn.pack(side=tk.LEFT, padx=5)
        
        self.stop_screen_btn = tk.Button(button_frame, text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–∫—Ä–∞–Ω", 
                                       command=self.stop_screen, state=tk.DISABLED,
                                       width=15, height=2)
        self.stop_screen_btn.pack(side=tk.LEFT, padx=5)
        
        self.mouse_btn = tk.Button(button_frame, text="üê≠ –í–∫–ª—é—á–∏—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", 
                                  command=self.toggle_mouse_control, state=tk.DISABLED,
                                  width=15, height=2)
        self.mouse_btn.pack(side=tk.LEFT, padx=5)
        
        tk.Button(button_frame, text="üî¥ –í—ã—Ö–æ–¥", command=self.quit_app,
                 width=10, height=2, bg="red", fg="white").pack(side=tk.LEFT, padx=5)
        
        # –û–∫–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞
        self.screen_window = tk.Toplevel(self.control_window)
        self.screen_window.title("–≠–∫—Ä–∞–Ω —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ - –†–µ–∂–∏–º: –í–µ—Å—å —ç–∫—Ä–∞–Ω")
        self.screen_window.geometry("1920x1080")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Canvas –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        screen_frame = tk.Frame(self.screen_window)
        screen_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        self.screen_canvas = tk.Canvas(screen_frame, bg="black", width=1920, height=1080)
        self.screen_canvas.pack(fill=tk.BOTH, expand=True)
        
        self.screen_window.protocol("WM_DELETE_WINDOW", lambda: self.screen_window.withdraw())
        self.screen_window.withdraw()

        self.bind_control_events()
        self.process_messages()

    def bind_control_events(self):
        """–ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        if not self.screen_window:
            return
            
        # –°–æ–±—ã—Ç–∏—è –º—ã—à–∏ –Ω–∞ Canvas
        self.screen_canvas.bind("<Motion>", self.on_mouse_move)
        self.screen_canvas.bind("<ButtonPress-1>", self.on_mouse_down)
        self.screen_canvas.bind("<ButtonRelease-1>", self.on_mouse_up)
        self.screen_canvas.bind("<ButtonPress-3>", self.on_right_mouse_down)
        self.screen_canvas.bind("<ButtonRelease-3>", self.on_right_mouse_up)
        self.screen_canvas.bind("<Double-Button-1>", self.on_double_click)
        
        # –°–æ–±—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        self.screen_window.bind("<KeyPress>", self.on_key_press)
        self.screen_window.bind("<KeyRelease>", self.on_key_release)
        
        self.screen_canvas.focus_set()

    def is_point_in_image(self, x, y):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–æ—á–∫–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–µ –≤ —á–µ—Ä–Ω—ã—Ö –ø–æ–ª–æ—Å–∞—Ö)"""
        return (self.scale_params['offset_x'] <= x < self.scale_params['offset_x'] + self.scale_params['scaled_width'] and
                self.scale_params['offset_y'] <= y < self.scale_params['offset_y'] + self.scale_params['scaled_height'])

    def on_mouse_move(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏"""
        current_time = time.time()
        if (self.mouse_control_enabled and self.connected and 
            (current_time - self.last_mouse_time) >= self.mouse_throttle):
            
            self.last_mouse_time = current_time
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∫—É—Ä—Å–æ—Ä –≤ –æ–±–ª–∞—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if self.is_point_in_image(event.x, event.y):
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –∫ –¥–∞–Ω–Ω—ã–º –º—ã—à–∏
                mouse_data = {
                    "x": event.x,
                    "y": event.y,
                    "scale_ratio": self.scale_params['scale_ratio'],
                    "offset_x": self.scale_params['offset_x'],
                    "offset_y": self.scale_params['offset_y'],
                    "scaled_width": self.scale_params['scaled_width'],
                    "scaled_height": self.scale_params['scaled_height']
                }
                
                asyncio.run_coroutine_threadsafe(
                    self.send_command("mouse_move", mouse_data), 
                    self.asyncio_loop
                )

    def on_mouse_down(self, event):
        """–õ–µ–≤—ã–π –∫–ª–∏–∫ –º—ã—à–∏ - –Ω–∞–∂–∞—Ç–∏–µ"""
        if self.mouse_control_enabled and self.connected:
            if self.is_point_in_image(event.x, event.y):
                mouse_data = {
                    "x": event.x,
                    "y": event.y,
                    "button": "left",
                    "scale_ratio": self.scale_params['scale_ratio'],
                    "offset_x": self.scale_params['offset_x'],
                    "offset_y": self.scale_params['offset_y'],
                    "scaled_width": self.scale_params['scaled_width'],
                    "scaled_height": self.scale_params['scaled_height']
                }
                
                asyncio.run_coroutine_threadsafe(
                    self.send_command("mouse_down", mouse_data), 
                    self.asyncio_loop
                )

    def on_mouse_up(self, event):
        """–õ–µ–≤—ã–π –∫–ª–∏–∫ –º—ã—à–∏ - –æ—Ç–ø—É—Å–∫–∞–Ω–∏–µ"""
        if self.mouse_control_enabled and self.connected:
            if self.is_point_in_image(event.x, event.y):
                mouse_data = {
                    "x": event.x,
                    "y": event.y,
                    "button": "left",
                    "scale_ratio": self.scale_params['scale_ratio'],
                    "offset_x": self.scale_params['offset_x'],
                    "offset_y": self.scale_params['offset_y'],
                    "scaled_width": self.scale_params['scaled_width'],
                    "scaled_height": self.scale_params['scaled_height']
                }
                
                asyncio.run_coroutine_threadsafe(
                    self.send_command("mouse_up", mouse_data), 
                    self.asyncio_loop
                )

    def on_right_mouse_down(self, event):
        """–ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ –º—ã—à–∏ - –Ω–∞–∂–∞—Ç–∏–µ"""
        if self.mouse_control_enabled and self.connected:
            if self.is_point_in_image(event.x, event.y):
                mouse_data = {
                    "x": event.x,
                    "y": event.y,
                    "button": "right",
                    "scale_ratio": self.scale_params['scale_ratio'],
                    "offset_x": self.scale_params['offset_x'],
                    "offset_y": self.scale_params['offset_y'],
                    "scaled_width": self.scale_params['scaled_width'],
                    "scaled_height": self.scale_params['scaled_height']
                }
                
                asyncio.run_coroutine_threadsafe(
                    self.send_command("mouse_down", mouse_data), 
                    self.asyncio_loop
                )

    def on_right_mouse_up(self, event):
        """–ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ –º—ã—à–∏ - –æ—Ç–ø—É—Å–∫–∞–Ω–∏–µ"""
        if self.mouse_control_enabled and self.connected:
            if self.is_point_in_image(event.x, event.y):
                mouse_data = {
                    "x": event.x,
                    "y": event.y,
                    "button": "right",
                    "scale_ratio": self.scale_params['scale_ratio'],
                    "offset_x": self.scale_params['offset_x'],
                    "offset_y": self.scale_params['offset_y'],
                    "scaled_width": self.scale_params['scaled_width'],
                    "scaled_height": self.scale_params['scaled_height']
                }
                
                asyncio.run_coroutine_threadsafe(
                    self.send_command("mouse_up", mouse_data), 
                    self.asyncio_loop
                )

    def on_double_click(self, event):
        """–î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫"""
        if self.mouse_control_enabled and self.connected:
            if self.is_point_in_image(event.x, event.y):
                mouse_data = {
                    "x": event.x,
                    "y": event.y,
                    "button": "left",
                    "scale_ratio": self.scale_params['scale_ratio'],
                    "offset_x": self.scale_params['offset_x'],
                    "offset_y": self.scale_params['offset_y'],
                    "scaled_width": self.scale_params['scaled_width'],
                    "scaled_height": self.scale_params['scaled_height']
                }
                
                asyncio.run_coroutine_threadsafe(
                    self.send_command("mouse_click", mouse_data), 
                    self.asyncio_loop
                )

    def on_key_press(self, event):
        """–ù–∞–∂–∞—Ç–∏–µ –∫–ª–∞–≤–∏—à–∏"""
        if self.mouse_control_enabled and self.connected:
            key = event.keysym
            special_keys = {
                "Return": "enter", "space": "space", "BackSpace": "backspace",
                "Escape": "esc", "Tab": "tab", "Delete": "delete",
                "Home": "home", "End": "end", "Page_Up": "pageup", 
                "Page_Down": "pagedown", "Left": "left", "Right": "right",
                "Up": "up", "Down": "down"
            }
            
            if key in special_keys:
                asyncio.run_coroutine_threadsafe(
                    self.send_command("key_press", {"key": special_keys[key]}), 
                    self.asyncio_loop
                )
            elif len(key) == 1 and key.isprintable():
                asyncio.run_coroutine_threadsafe(
                    self.send_command("key_press", {"key": key.lower()}), 
                    self.asyncio_loop
                )

    def on_key_release(self, event):
        """–û—Ç–ø—É—Å–∫–∞–Ω–∏–µ –∫–ª–∞–≤–∏—à–∏"""
        pass

    def process_messages(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        try:
            while True:
                message = self.message_queue.get_nowait()
                self.handle_async_message(message)
        except queue.Empty:
            pass
        finally:
            if self.control_window:
                self.control_window.after(50, self.process_messages)

    def handle_async_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞"""
        msg_type = message.get("type")
        
        if msg_type == "screen_update":
            self.log_info("üì∏ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –í–°–ï–ì–û —ç–∫—Ä–∞–Ω–∞")
            self.display_screen(message)
            
        elif msg_type == "controlled_connected":
            self.log_info("üñ•Ô∏è –£–ø—Ä–∞–≤–ª—è–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω")
            
        elif msg_type == "controlled_disconnected":
            self.log_info("üîå –£–ø—Ä–∞–≤–ª—è–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω")
            self.screen_window.withdraw()
            self.disable_mouse_control()
            
        elif msg_type == "controlled_status":
            self.log_info(f"üìä {message.get('info', '')}")
            
        elif msg_type == "connection_status":
            self.update_status(message["message"], message["connected"])
            
        elif msg_type == "error":
            self.log_info(f"‚ùå –û—à–∏–±–∫–∞: {message.get('message', '')}")

    def display_screen(self, message):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        try:
            screen_data = message.get("screen_data")
            if not screen_data:
                self.logger.error("‚ùå –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ —ç–∫—Ä–∞–Ω–∞")
                return
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
            self.scale_params = {
                'offset_x': message.get('offset_x', 0),
                'offset_y': message.get('offset_y', 0),
                'scaled_width': message.get('scaled_width', 1920),
                'scaled_height': message.get('scaled_height', 1080),
                'scale_ratio': message.get('scale_ratio', 1.0)
            }
            
            self.logger.info(f"üñºÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è: {self.scale_params}")
            
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64
            image_data = base64.b64decode(screen_data)
            
            # –°–æ–∑–¥–∞–µ–º BytesIO –æ–±—ä–µ–∫—Ç
            image_buffer = io.BytesIO(image_data)
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image = Image.open(image_buffer)
            
            # –°–æ–∑–¥–∞–µ–º PhotoImage
            photo = ImageTk.PhotoImage(image)
            
            # –û—á–∏—â–∞–µ–º canvas –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self.screen_canvas.delete("all")
            self.screen_canvas.create_image(0, 0, anchor=tk.NW, image=photo)
            self.screen_canvas.image = photo  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ, –µ—Å–ª–∏ –æ–Ω–æ —Å–∫—Ä—ã—Ç–æ
            if not self.screen_window.winfo_viewable():
                self.screen_window.deiconify()
                    
            self.logger.info("‚úÖ –í–µ—Å—å —ç–∫—Ä–∞–Ω –æ—Ç–æ–±—Ä–∞–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞: {e}")
            import traceback
            self.logger.error(f"üîç –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {traceback.format_exc()}")

    def update_status(self, message, is_connected=False):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        self.connected = is_connected
        status_text = "–°—Ç–∞—Ç—É—Å: –ü–æ–¥–∫–ª—é—á–µ–Ω" if is_connected else "–°—Ç–∞—Ç—É—Å: –û—Ç–∫–ª—é—á–µ–Ω"
        self.status_label.config(text=status_text, 
                               fg="green" if is_connected else "red")
        
        self.screen_btn.config(state=tk.NORMAL if is_connected else tk.DISABLED)
        self.stop_screen_btn.config(state=tk.NORMAL if is_connected else tk.DISABLED)
        self.mouse_btn.config(state=tk.NORMAL if is_connected else tk.DISABLED)
        
        self.log_info(message)

    def log_info(self, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –ª–æ–≥"""
        if hasattr(self, 'info_text') and self.info_text:
            timestamp = datetime.now().strftime('%H:%M:%S')
            self.info_text.insert(tk.END, f"{timestamp} - {message}\n")
            self.info_text.see(tk.END)

    def request_screen(self):
        """–ó–∞–ø—Ä–æ—Å —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å —É–ø—Ä–∞–≤–ª—è–µ–º–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
        if self.connected:
            asyncio.run_coroutine_threadsafe(
                self.send_command("capture_screen"), 
                self.asyncio_loop
            )
            self.log_info("üì® –ó–∞–ø—Ä–æ—Å –í–°–ï–ì–û —ç–∫—Ä–∞–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

    def stop_screen(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ —ç–∫—Ä–∞–Ω–∞"""
        if self.connected:
            asyncio.run_coroutine_threadsafe(
                self.send_command("stop_capture"), 
                self.asyncio_loop
            )
            self.log_info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ —ç–∫—Ä–∞–Ω–∞")
            self.screen_canvas.delete("all")
            self.screen_window.withdraw()

    def toggle_mouse_control(self):
        """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—ã—à—å—é"""
        if self.connected:
            if not self.mouse_control_enabled:
                self.enable_mouse_control()
            else:
                self.disable_mouse_control()

    def enable_mouse_control(self):
        """–í–∫–ª—é—á–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—ã—à—å—é"""
        self.mouse_control_enabled = True
        self.mouse_btn.config(text="üê≠ –í—ã–∫–ª—é—á–∏—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", bg="red", fg="white")
        self.log_info("üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à—å—é –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–û")
        if not self.screen_window.winfo_viewable():
            self.screen_window.deiconify()
        self.screen_canvas.focus_set()
        
        asyncio.run_coroutine_threadsafe(
            self.send_command("toggle_mouse_control"), 
            self.asyncio_loop
        )

    def disable_mouse_control(self):
        """–í—ã–∫–ª—é—á–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—ã—à—å—é"""
        self.mouse_control_enabled = False
        self.mouse_btn.config(text="üê≠ –í–∫–ª—é—á–∏—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", bg="SystemButtonFace", fg="black")
        self.log_info("üñ±Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à—å—é –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ")
        
        asyncio.run_coroutine_threadsafe(
            self.send_command("toggle_mouse_control"), 
            self.asyncio_loop
        )

    async def send_command(self, command, data=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª—è–µ–º–æ–º—É –∫–ª–∏–µ–Ω—Ç—É"""
        if self.websocket and self.connected:
            try:
                await self.websocket.send(json.dumps({
                    "type": "control_command",
                    "command": command,
                    "data": data
                }))
                self.logger.debug(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {command}")
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")

    async def connect_to_server(self, uri):
        try:
            self.logger.info(f"üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {uri}...")
            self.websocket = await websockets.connect(
                uri,
                ping_interval=30,
                ping_timeout=10,
                close_timeout=5,
                max_size=10 * 1024 * 1024
            )
            
            await self.websocket.send(json.dumps({
                "type": "controller",
                "client_id": self.client_id
            }))
            
            message = await self.websocket.recv()
            data = json.loads(message)
            
            if data.get("type") == "connection_established":
                self.message_queue.put({
                    "type": "connection_status",
                    "message": "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
                    "connected": True
                })
                return True
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            self.message_queue.put({
                "type": "connection_status",
                "message": f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}",
                "connected": False
            })
            return False

    async def receive_messages(self):
        try:
            async for message in self.websocket:
                data = json.loads(message)
                self.message_queue.put(data)
                    
        except websockets.exceptions.ConnectionClosed:
            self.logger.warning("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –∑–∞–∫—Ä—ã—Ç–æ")
            self.message_queue.put({
                "type": "connection_status",
                "message": "üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ—Ç–µ—Ä—è–Ω–æ",
                "connected": False
            })
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            self.message_queue.put({
                "type": "connection_status", 
                "message": f"‚ùå –û—à–∏–±–∫–∞: {e}",
                "connected": False
            })

    async def async_main(self, uri):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
        self.asyncio_loop = asyncio.get_running_loop()
        
        if not await self.connect_to_server(uri):
            return
            
        await self.receive_messages()

    def start_async_thread(self, uri):
        """–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        def run_async():
            asyncio.run(self.async_main(uri))
        
        self.asyncio_thread = threading.Thread(target=run_async, daemon=True)
        self.asyncio_thread.start()

    def start(self, uri):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.create_control_window()
        self.start_async_thread(uri)
        
        try:
            self.control_window.mainloop()
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ GUI: {e}")
        finally:
            self.quit_app()

    def quit_app(self):
        """–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.disable_mouse_control()
        
        if self.websocket and self.asyncio_loop:
            asyncio.run_coroutine_threadsafe(
                self.websocket.close(),
                self.asyncio_loop
            )
        
        if self.control_window:
            self.control_window.quit()
            self.control_window.destroy()

def main():
    print("=== üéÆ –ö–ª–∏–µ–Ω—Ç —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ===")
    print("üñ•Ô∏è  –†–µ–∂–∏–º: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –í–°–ï–ì–û —ç–∫—Ä–∞–Ω–∞ —É–ø—Ä–∞–≤–ª—è–µ–º–æ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞")
    print("üí° –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –±—É–¥—É—Ç –≤–∏–¥–Ω—ã")
    
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger("Main")
    
    try:
        if len(sys.argv) > 1:
            domain = sys.argv[1]
        else:
            domain = input("–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ 'local' –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ: ").strip()

        if domain.lower() == 'local':
            uri = "ws://127.0.0.1:8000"
            logger.info(f"üîß –õ–æ–∫–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {uri}")
        else:
            domain = domain.replace('http://', '').replace('https://', '').replace('ws://', '').replace('wss://', '')
            uri = f"wss://{domain}"
            logger.info(f"üåê –£–¥–∞–ª–µ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {uri}")

        client = RemoteControllerClient()
        client.start(uri)
        
    except KeyboardInterrupt:
        logger.info("üõë –ö–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        print("\nüõë –ö–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()