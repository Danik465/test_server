import socket
import threading
import sys

class RailwayChatClient:
    def __init__(self):
        self.client = None
        self.nickname = ""
        self.running = False
        
    def connect_to_server(self, domain, port=5555):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É –Ω–∞ Railway"""
        try:
            print(f"üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {domain}:{port}...")
            self.client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.client.connect((domain, port))
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∏–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
            nickname_request = self.client.recv(1024).decode('utf-8')
            if nickname_request == "NICK":
                self.nickname = input("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º: ")
                self.client.send(self.nickname.encode('utf-8'))
                
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            response = self.client.recv(1024).decode('utf-8')
            print(f"\n{response}")
            
            self.running = True
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
            
    def receive_messages(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
        while self.running:
            try:
                message = self.client.recv(1024).decode('utf-8')
                if message:
                    print(f"\r{message}\n–í—ã: ", end="")
                else:
                    break
            except:
                print("\n‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ—Ç–µ—Ä—è–Ω–æ")
                self.running = False
                break
                
    def send_messages(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
        while self.running:
            try:
                message = input("–í—ã: ")
                if message.lower() == '/quit':
                    self.running = False
                    break
                elif message.lower() == '/users':
                    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    pass
                elif message.strip():
                    self.client.send(message.encode('utf-8'))
            except KeyboardInterrupt:
                print("\nüõë –í—ã—Ö–æ–¥ –∏–∑ —á–∞—Ç–∞...")
                self.running = False
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                self.running = False
                break
                
    def start(self, domain, port=5555):
        """–ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞"""
        if not self.connect_to_server(domain, port):
            return
            
        print("\n‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –î–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ /quit")
        print("-" * 50)
        
        # –ü–æ—Ç–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        receive_thread = threading.Thread(target=self.receive_messages)
        receive_thread.daemon = True
        receive_thread.start()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.send_messages()
        
        self.client.close()
        print("üëã –ö–ª–∏–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

def main():
    print("=== üöÄ –ß–∞—Ç-–∫–ª–∏–µ–Ω—Ç –¥–ª—è Railway ===")
    
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) >= 2:
        domain = sys.argv[1]
        port = int(sys.argv[2]) if len(sys.argv) > 2 else 5555
    else:
        domain = input("–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω Railway (–Ω–∞–ø—Ä–∏–º–µ—Ä: your-project.up.railway.app): ").strip()
        port = input("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5555): ").strip()
        port = int(port) if port else 5555
    
    client = RailwayChatClient()
    client.start(domain, port)

if __name__ == "__main__":
    main()