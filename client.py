import asyncio
import websockets
import json
import sys
import logging
from datetime import datetime

class WebSocketChatClient:
    def __init__(self):
        self.websocket = None
        self.nickname = ""
        self.running = False
        self.setup_logging()
        
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler("client.log", encoding='utf-8'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger("WebSocketClient")

    async def connect_to_server(self, uri):
        try:
            self.logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {uri}...")
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –∏ –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL –¥–ª—è Railway
            self.websocket = await websockets.connect(
                uri,
                ping_interval=20,
                ping_timeout=10,
                close_timeout=10,
                max_size=10**6  # 1MB
            )
            
            self.logger.info("‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            # –ñ–¥–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∏–∫–Ω–µ–π–º–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
            message = await asyncio.wait_for(self.websocket.recv(), timeout=10.0)
            data = json.loads(message)
            
            if data.get("type") == "request_nickname":
                self.logger.info("üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∏–∫–Ω–µ–π–º–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
                self.nickname = input("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º: ")
                await self.websocket.send(json.dumps({"nickname": self.nickname}))
                self.logger.info(f"üë§ –ù–∏–∫–Ω–µ–π–º '{self.nickname}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
                
            self.running = True
            return True
            
        except asyncio.TimeoutError:
            self.logger.error("‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É")
            return False
        except websockets.exceptions.InvalidURI:
            self.logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π URI —Å–µ—Ä–≤–µ—Ä–∞")
            return False
        except websockets.exceptions.WebSocketException as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ WebSocket: {e}")
            return False
        except Exception as e:
            self.logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False

    async def receive_messages(self):
        try:
            self.logger.info("üëÇ –ù–∞—á–∞–ª–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
            async for message in self.websocket:
                data = json.loads(message)
                
                if data["type"] == "chat_message":
                    timestamp = data["timestamp"][11:19]
                    print(f"\r[{timestamp}] {data['nickname']}: {data['message']}")
                    self.logger.info(f"üí¨ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {data['nickname']}: {data['message']}")
                    
                elif data["type"] == "user_joined":
                    print(f"\rüåü {data['message']}")
                    self.logger.info(f"üë§ {data['message']}")
                    
                print("–í—ã: ", end="", flush=True)
                
        except websockets.exceptions.ConnectionClosed as e:
            self.logger.warning(f"üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –∑–∞–∫—Ä—ã—Ç–æ: {e}")
            print("\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ—Ç–µ—Ä—è–Ω–æ")
            self.running = False
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            self.running = False

    async def send_messages(self):
        try:
            self.logger.info("üìù –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")
            while self.running:
                message = await asyncio.get_event_loop().run_in_executor(None, input, "–í—ã: ")
                
                if message.lower() == '/quit':
                    self.logger.info("üö™ –ó–∞–ø—Ä–æ—à–µ–Ω –≤—ã—Ö–æ–¥ –∏–∑ —á–∞—Ç–∞")
                    break
                elif message.lower() == '/status':
                    status = "–ø–æ–¥–∫–ª—é—á–µ–Ω" if self.running else "–æ—Ç–∫–ª—é—á–µ–Ω"
                    print(f"üìä –°—Ç–∞—Ç—É—Å: {status}, –ù–∏–∫–Ω–µ–π–º: {self.nickname}")
                    continue
                elif message.strip():
                    await self.websocket.send(json.dumps({
                        "type": "message",
                        "message": message
                    }))
                    self.logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
                    
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    async def start(self, uri):
        self.logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ —Å URI: {uri}")
        
        if not await self.connect_to_server(uri):
            self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
            return
            
        print("\n‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –î–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ /quit")
        print("üí° –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤–≤–µ–¥–∏—Ç–µ /status")
        print("-" * 50)
        
        try:
            receive_task = asyncio.create_task(self.receive_messages())
            send_task = asyncio.create_task(self.send_messages())
            
            await asyncio.gather(receive_task, send_task, return_exceptions=True)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
        finally:
            self.running = False
            if self.websocket:
                await self.websocket.close()
                self.logger.info("üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
                
        self.logger.info("üëã –ö–ª–∏–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
        print("üëã –ö–ª–∏–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

def main():
    print("=== üöÄ WebSocket –ß–∞—Ç-–∫–ª–∏–µ–Ω—Ç ===")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è main
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger("Main")
    
    try:
        if len(sys.argv) > 1:
            domain = sys.argv[1]
        else:
            domain = input("–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω –∏–ª–∏ 'local' –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ").strip()

        if domain.lower() == 'local':
            uri = "ws://127.0.0.1:8000"
            logger.info(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {uri}")
        else:
            # –û—á–∏—Å—Ç–∫–∞ –¥–æ–º–µ–Ω–∞ –æ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
            domain = domain.replace('http://', '').replace('https://', '').replace('ws://', '').replace('wss://', '')
            
            # –î–ª—è Railway –∏—Å–ø–æ–ª—å–∑—É–µ–º wss, –Ω–æ —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π SSL
            uri = f"wss://{domain}"
            logger.info(f"üåê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–¥–∞–ª–µ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {uri}")

        client = WebSocketChatClient()
        asyncio.run(client.start(uri))
        
    except KeyboardInterrupt:
        logger.info("üõë –ö–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        print("\nüõë –ö–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()