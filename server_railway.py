import asyncio
import websockets
import json
import logging
from datetime import datetime
import os
import socket

class WebSocketChatServer:
    def __init__(self):
        # Railway –∑–∞–¥–∞—ë—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é PORT –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        self.port = int(os.environ.get('PORT', 8000))
        # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å localhost
        self.host = "0.0.0.0"
        self.clients = set()
        self.setup_logging()

    def setup_logging(self):
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[logging.StreamHandler()]
        )
        self.logger = logging.getLogger(__name__)

    async def handle_client(self, websocket, path):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
        self.clients.add(websocket)
        self.logger.info(f"üîó –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è. –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(self.clients)}")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫–Ω–µ–π–º
            await websocket.send(json.dumps({"type": "request_nickname"}))
            nickname_message = await websocket.recv()
            nickname_data = json.loads(nickname_message)
            nickname = nickname_data.get("nickname", "Anonymous")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            join_message = {
                "type": "user_joined",
                "nickname": nickname,
                "timestamp": datetime.now().isoformat(),
                "message": f"{nickname} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É!"
            }
            await self.broadcast(join_message)

            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            async for message in websocket:
                try:
                    data = json.loads(message)
                    if data.get("type") == "message":
                        chat_message = {
                            "type": "chat_message",
                            "nickname": nickname,
                            "message": data["message"],
                            "timestamp": datetime.now().isoformat()
                        }
                        self.logger.info(f"üí¨ {nickname}: {data['message']}")
                        await self.broadcast(chat_message)
                except json.JSONDecodeError:
                    continue

        except websockets.exceptions.ConnectionClosed:
            self.logger.info(f"üîå –ö–ª–∏–µ–Ω—Ç {nickname} –æ—Ç–∫–ª—é—á–∏–ª—Å—è")
        finally:
            self.clients.remove(websocket)
            self.logger.info(f"üëã –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω. –û—Å—Ç–∞–ª–æ—Å—å –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(self.clients)}")

    async def broadcast(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º"""
        if self.clients:
            message_json = json.dumps(message)
            await asyncio.gather(
                *[client.send(message_json) for client in self.clients],
                return_exceptions=True
            )

    def detect_environment(self):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–∞ Railway –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ"""
        if "PORT" in os.environ:
            return "railway"
        return "local"

    def get_local_ip(self):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π IP (–¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –¥—Ä—É–≥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ —Å–µ—Ç–∏)"""
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            s.connect(("8.8.8.8", 80))
            ip = s.getsockname()[0]
            s.close()
            return ip
        except Exception:
            return "127.0.0.1"

    async def start_server(self):
        """–ó–∞–ø—É—Å–∫ WebSocket —Å–µ—Ä–≤–µ—Ä–∞"""
        env = self.detect_environment()
        self.logger.info(f"üåê –°—Ä–µ–¥–∞ –∑–∞–ø—É—Å–∫–∞: {env.upper()}")

        if env == "local":
            ip = self.get_local_ip()
            self.logger.info(f"üñ•  –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ –Ω–∞ ws://{ip}:{self.port}")
            self.logger.info(f"üí° –ü–æ–¥–∫–ª—é—á–∞–π—Ç–µ—Å—å —Å —ç—Ç–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ ws://127.0.0.1:{self.port}")
        else:
            self.logger.info(f"üöÄ Railway —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {self.port}")

        self.logger.info("üì¢ –û–∂–∏–¥–∞–Ω–∏–µ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")

        async with websockets.serve(self.handle_client, self.host, self.port):
            await asyncio.Future()  # –≤–µ—á–Ω—ã–π —Ü–∏–∫–ª

if __name__ == "__main__":
    server = WebSocketChatServer()
    asyncio.run(server.start_server())
