import asyncio
import websockets
import json
import logging
from datetime import datetime
import os
import socket
import ssl

class WebSocketChatServer:
    def __init__(self):
        self.port = int(os.environ.get('PORT', 8000))
        self.host = "0.0.0.0"
        self.clients = set()
        self.setup_logging()

    def setup_logging(self):
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[logging.StreamHandler()]
        )
        self.logger = logging.getLogger(__name__)

    async def handle_client(self, websocket, path):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
        client_ip = websocket.remote_address[0] if websocket.remote_address else "unknown"
        self.clients.add(websocket)
        self.logger.info(f"üîó –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∏–∑ {client_ip}. –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(self.clients)}")

        nickname = "Anonymous"
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫–Ω–µ–π–º
            await websocket.send(json.dumps({"type": "request_nickname"}))
            self.logger.info(f"üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∏–∫–Ω–µ–π–º–∞ –∫–ª–∏–µ–Ω—Ç—É {client_ip}")
            
            nickname_message = await asyncio.wait_for(websocket.recv(), timeout=30.0)
            nickname_data = json.loads(nickname_message)
            nickname = nickname_data.get("nickname", "Anonymous")
            
            self.logger.info(f"üë§ –ö–ª–∏–µ–Ω—Ç {client_ip} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –Ω–∏–∫–Ω–µ–π–º: {nickname}")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            join_message = {
                "type": "user_joined",
                "nickname": nickname,
                "timestamp": datetime.now().isoformat(),
                "message": f"{nickname} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É!"
            }
            await self.broadcast(join_message)
            self.logger.info(f"üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ {nickname} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º")

            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            async for message in websocket:
                try:
                    data = json.loads(message)
                    if data.get("type") == "message":
                        chat_message = {
                            "type": "chat_message",
                            "nickname": nickname,
                            "message": data["message"],
                            "timestamp": datetime.now().isoformat()
                        }
                        self.logger.info(f"üí¨ {nickname}: {data['message']}")
                        await self.broadcast(chat_message)
                except json.JSONDecodeError as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –æ—Ç {nickname}: {e}")
                    continue
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {nickname}: {e}")
                    continue

        except asyncio.TimeoutError:
            self.logger.warning(f"‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {client_ip}")
        except websockets.exceptions.ConnectionClosed as e:
            self.logger.info(f"üîå –ö–ª–∏–µ–Ω—Ç {nickname} –æ—Ç–∫–ª—é—á–∏–ª—Å—è: {e}")
        except Exception as e:
            self.logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º {nickname}: {e}")
        finally:
            if websocket in self.clients:
                self.clients.remove(websocket)
            self.logger.info(f"üëã –ö–ª–∏–µ–Ω—Ç {nickname} –æ—Ç–∫–ª—é—á–µ–Ω. –û—Å—Ç–∞–ª–æ—Å—å –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(self.clients)}")

    async def broadcast(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º"""
        if self.clients:
            message_json = json.dumps(message)
            disconnected_clients = []
            
            for client in self.clients:
                try:
                    await client.send(message_json)
                except websockets.exceptions.ConnectionClosed:
                    disconnected_clients.append(client)
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É: {e}")
                    disconnected_clients.append(client)
            
            # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
            for client in disconnected_clients:
                if client in self.clients:
                    self.clients.remove(client)
                    
            if disconnected_clients:
                self.logger.info(f"üßπ –£–¥–∞–ª–µ–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(disconnected_clients)}")

    def detect_environment(self):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–∞ Railway –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ"""
        if "RAILWAY_ENVIRONMENT" in os.environ or "PORT" in os.environ:
            return "railway"
        return "local"

    def get_local_ip(self):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π IP"""
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            s.connect(("8.8.8.8", 80))
            ip = s.getsockname()[0]
            s.close()
            return ip
        except Exception:
            return "127.0.0.1"

    async def start_server(self):
        """–ó–∞–ø—É—Å–∫ WebSocket —Å–µ—Ä–≤–µ—Ä–∞"""
        env = self.detect_environment()
        self.logger.info(f"üåê –°—Ä–µ–¥–∞ –∑–∞–ø—É—Å–∫–∞: {env.upper()}")
        self.logger.info(f"üìç –•–æ—Å—Ç: {self.host}, –ü–æ—Ä—Ç: {self.port}")

        if env == "local":
            ip = self.get_local_ip()
            self.logger.info(f"üñ•  –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ –Ω–∞ ws://{ip}:{self.port}")
            self.logger.info(f"üí° –ü–æ–¥–∫–ª—é—á–∞–π—Ç–µ—Å—å —Å —ç—Ç–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ ws://127.0.0.1:{self.port}")
        else:
            self.logger.info(f"üöÄ Railway —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {self.port}")
            self.logger.info("üí° –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ–º–µ–Ω Railway —Å –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º wss://")

        self.logger.info("üì¢ –û–∂–∏–¥–∞–Ω–∏–µ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")

        # –ù–∞ Railway SSL –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø—Ä–æ–∫—Å–∏, –ø–æ—ç—Ç–æ–º—É –∑–∞–ø—É—Å–∫–∞–µ–º –±–µ–∑ SSL
        start_server = websockets.serve(
            self.handle_client, 
            self.host, 
            self.port,
            ping_interval=20,
            ping_timeout=10
        )
        
        async with start_server:
            self.logger.info("‚úÖ WebSocket —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
            await asyncio.Future()  # –≤–µ—á–Ω—ã–π —Ü–∏–∫–ª

if __name__ == "__main__":
    server = WebSocketChatServer()
    try:
        asyncio.run(server.start_server())
    except KeyboardInterrupt:
        print("\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")