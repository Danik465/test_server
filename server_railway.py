import socket
import threading
import logging
from datetime import datetime
import os

class RailwayChatServer:
    def __init__(self):
        # Railway –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ—Ä—Ç —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.host = '0.0.0.0'
        self.port = int(os.environ.get('PORT', 5555))
        self.clients = []
        self.nicknames = []
        self.setup_logging()
        
    def setup_logging(self):
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.StreamHandler()  # –í Railway –ª–æ–≥–∏ –≤—ã–≤–æ–¥—è—Ç—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å
            ]
        )
        self.logger = logging.getLogger(__name__)
        
    def start_server(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
        self.server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        
        try:
            self.server.bind((self.host, self.port))
            self.server.listen()
            self.logger.info("=" * 50)
            self.logger.info(f"üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {self.host}:{self.port}")
            self.logger.info("üì¢ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
            self.logger.info("=" * 50)
            
            while True:
                client, address = self.server.accept()
                self.logger.info(f"üîó –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç {address[0]}:{address[1]}")
                
                # –ó–∞–ø—Ä–æ—Å –Ω–∏–∫–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
                client.send("NICK".encode('utf-8'))
                nickname = client.recv(1024).decode('utf-8')
                
                self.nicknames.append(nickname)
                self.clients.append(client)
                
                self.logger.info(f"üë§ –ù–∏–∫–Ω–µ–π–º –∫–ª–∏–µ–Ω—Ç–∞: {nickname}")
                self.broadcast(f"{nickname} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É!".encode('utf-8'))
                client.send("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —É—Å–ø–µ—à–Ω–æ!".encode('utf-8'))
                
                # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
                thread = threading.Thread(target=self.handle_client, args=(client,))
                thread.daemon = True
                thread.start()
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        finally:
            self.stop_server()
            
    def handle_client(self, client):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞"""
        while True:
            try:
                message = client.recv(1024)
                if not message:
                    break
                    
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                nickname = self.nicknames[self.clients.index(client)]
                timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                self.logger.info(f"[{timestamp}] {nickname}: {message.decode('utf-8')}")
                
                self.broadcast(message, nickname)
                
            except (ConnectionResetError, BrokenPipeError):
                self.remove_client(client)
                break
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                self.remove_client(client)
                break
                
    def broadcast(self, message, sender_nickname=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        
        if sender_nickname:
            formatted_message = f"[{timestamp}] {sender_nickname}: {message.decode('utf-8')}"
            message = formatted_message.encode('utf-8')
        
        for client in self.clients[:]:
            try:
                client.send(message)
            except:
                self.remove_client(client)
                
    def remove_client(self, client):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏"""
        if client in self.clients:
            index = self.clients.index(client)
            nickname = self.nicknames[index]
            
            self.clients.remove(client)
            self.nicknames.remove(nickname)
            
            client.close()
            self.broadcast(f"‚ùå {nickname} –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç.".encode('utf-8'))
            self.logger.info(f"üëã –ö–ª–∏–µ–Ω—Ç {nickname} –æ—Ç–∫–ª—é—á–µ–Ω")
            
    def stop_server(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        self.logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
        for client in self.clients:
            client.close()
        if hasattr(self, 'server'):
            self.server.close()
        self.logger.info("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    server = RailwayChatServer()
    server.start_server()