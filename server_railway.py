import asyncio
import websockets
import json
import logging
from datetime import datetime
import os

class WebSocketChatServer:
    def __init__(self):
        self.port = int(os.environ.get('PORT', 8000))
        self.clients = set()
        self.setup_logging()
        
    def setup_logging(self):
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[logging.StreamHandler()]
        )
        self.logger = logging.getLogger(__name__)
        
    async def handle_client(self, websocket, path):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
        self.clients.add(websocket)
        self.logger.info(f"üîó –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è. –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(self.clients)}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫–Ω–µ–π–º
            await websocket.send(json.dumps({"type": "request_nickname"}))
            nickname_message = await websocket.recv()
            nickname_data = json.loads(nickname_message)
            nickname = nickname_data.get("nickname", "Anonymous")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            join_message = {
                "type": "user_joined",
                "nickname": nickname,
                "timestamp": datetime.now().isoformat(),
                "message": f"{nickname} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É!"
            }
            await self.broadcast(join_message)
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            async for message in websocket:
                try:
                    data = json.loads(message)
                    if data.get("type") == "message":
                        chat_message = {
                            "type": "chat_message",
                            "nickname": nickname,
                            "message": data["message"],
                            "timestamp": datetime.now().isoformat()
                        }
                        self.logger.info(f"üí¨ {nickname}: {data['message']}")
                        await self.broadcast(chat_message)
                except json.JSONDecodeError:
                    continue
                    
        except websockets.exceptions.ConnectionClosed:
            self.logger.info("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        finally:
            self.clients.remove(websocket)
            self.logger.info(f"üëã –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω. –û—Å—Ç–∞–ª–æ—Å—å –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(self.clients)}")
            
    async def broadcast(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º"""
        if self.clients:
            message_json = json.dumps(message)
            await asyncio.gather(
                *[client.send(message_json) for client in self.clients],
                return_exceptions=True
            )
            
    async def start_server(self):
        """–ó–∞–ø—É—Å–∫ WebSocket —Å–µ—Ä–≤–µ—Ä–∞"""
        self.logger.info(f"üöÄ WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {self.port}")
        self.logger.info("üì¢ –û–∂–∏–¥–∞–Ω–∏–µ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
        
        async with websockets.serve(self.handle_client, "0.0.0.0", self.port):
            await asyncio.Future()  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª

if __name__ == "__main__":
    server = WebSocketChatServer()
    asyncio.run(server.start_server())