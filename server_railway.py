import asyncio
import websockets
import json
import logging
from datetime import datetime
import os
import socket

class WebSocketRemoteServer:
    def __init__(self):
        self.port = int(os.environ.get('PORT', 8080))
        self.host = "0.0.0.0"
        self.controller_client = None  # –£–ø—Ä–∞–≤–ª—è—é—â–∏–π –∫–ª–∏–µ–Ω—Ç
        self.controlled_client = None  # –£–ø—Ä–∞–≤–ª—è–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç
        self.setup_logging()

    def setup_logging(self):
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[logging.StreamHandler()]
        )
        self.logger = logging.getLogger(__name__)

    async def handle_client(self, websocket):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
        client_ip = websocket.remote_address[0] if websocket.remote_address else "unknown"
        self.logger.info(f"üîó –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∏–∑ {client_ip}")

        client_type = None
        client_id = None
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∫–ª–∏–µ–Ω—Ç–∞
            init_message = await asyncio.wait_for(websocket.recv(), timeout=30.0)
            init_data = json.loads(init_message)
            client_type = init_data.get("type")
            client_id = init_data.get("client_id", "unknown")

            if client_type == "controller":
                if self.controller_client:
                    await websocket.send(json.dumps({
                        "type": "error",
                        "message": "–£–ø—Ä–∞–≤–ª—è—é—â–∏–π –∫–ª–∏–µ–Ω—Ç —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"
                    }))
                    await websocket.close()
                    return
                self.controller_client = websocket
                self.logger.info(f"üéÆ –ü–æ–¥–∫–ª—é—á–µ–Ω —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –∫–ª–∏–µ–Ω—Ç: {client_id}")
                await websocket.send(json.dumps({
                    "type": "connection_established",
                    "role": "controller"
                }))

            elif client_type == "controlled":
                if self.controlled_client:
                    await websocket.send(json.dumps({
                        "type": "error", 
                        "message": "–£–ø—Ä–∞–≤–ª—è–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"
                    }))
                    await websocket.close()
                    return
                self.controlled_client = websocket
                self.logger.info(f"üñ•Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω —É–ø—Ä–∞–≤–ª—è–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç: {client_id}")
                await websocket.send(json.dumps({
                    "type": "connection_established",
                    "role": "controlled"
                }))

                # –£–≤–µ–¥–æ–º–ª—è–µ–º —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —É–ø—Ä–∞–≤–ª—è–µ–º–æ–≥–æ
                if self.controller_client:
                    await self.controller_client.send(json.dumps({
                        "type": "controlled_connected",
                        "client_id": client_id
                    }))

            else:
                await websocket.send(json.dumps({
                    "type": "error",
                    "message": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–ª–∏–µ–Ω—Ç–∞"
                }))
                await websocket.close()
                return

            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            async for message in websocket:
                try:
                    data = json.loads(message)
                    await self.route_message(data, websocket, client_type)
                    
                except json.JSONDecodeError as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}")
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        except asyncio.TimeoutError:
            self.logger.warning(f"‚è∞ –¢–∞–π–º–∞—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ {client_ip}")
        except websockets.exceptions.ConnectionClosed as e:
            self.logger.info(f"üîå –ö–ª–∏–µ–Ω—Ç {client_type} –æ—Ç–∫–ª—é—á–∏–ª—Å—è: {e}")
        except Exception as e:
            self.logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º {client_type}: {e}")
        finally:
            # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
            if client_type == "controller" and websocket == self.controller_client:
                self.controller_client = None
                self.logger.info("üéÆ –£–ø—Ä–∞–≤–ª—è—é—â–∏–π –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω")
            elif client_type == "controlled" and websocket == self.controlled_client:
                self.controlled_client = None
                self.logger.info("üñ•Ô∏è –£–ø—Ä–∞–≤–ª—è–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
                if self.controller_client:
                    await self.controller_client.send(json.dumps({
                        "type": "controlled_disconnected"
                    }))

    async def route_message(self, data, websocket, sender_type):
        """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–∞–º–∏"""
        message_type = data.get("type")
        
        if sender_type == "controller" and message_type == "control_command":
            # –ö–æ–º–∞–Ω–¥–∞ –æ—Ç —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–ø—Ä–∞–≤–ª—è–µ–º–æ–º—É
            if self.controlled_client:
                await self.controlled_client.send(json.dumps({
                    "type": "execute_command",
                    "command": data.get("command"),
                    "data": data.get("data")
                }))
                self.logger.info(f"üì® –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É–ø—Ä–∞–≤–ª—è–µ–º–æ–º—É: {data.get('command')}")
            else:
                await websocket.send(json.dumps({
                    "type": "error",
                    "message": "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª—è–µ–º–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"
                }))
                
        elif sender_type == "controlled" and message_type == "screen_data":
            # –î–∞–Ω–Ω—ã–µ —ç–∫—Ä–∞–Ω–∞ –æ—Ç —É–ø—Ä–∞–≤–ª—è–µ–º–æ–≥–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–ø—Ä–∞–≤–ª—è—é—â–µ–º—É
            if self.controller_client:
                await self.controller_client.send(json.dumps({
                    "type": "screen_update",
                    "screen_data": data.get("screen_data"),
                    "timestamp": datetime.now().isoformat()
                }))
            else:
                self.logger.warning("üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —ç–∫—Ä–∞–Ω–∞, –Ω–æ —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
                
        elif sender_type == "controlled" and message_type == "status_update":
            # –°—Ç–∞—Ç—É—Å –æ—Ç —É–ø—Ä–∞–≤–ª—è–µ–º–æ–≥–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–ø—Ä–∞–≤–ª—è—é—â–µ–º—É
            if self.controller_client:
                await self.controller_client.send(json.dumps({
                    "type": "controlled_status",
                    "status": data.get("status"),
                    "info": data.get("info")
                }))

    async def start_server(self):
        """–ó–∞–ø—É—Å–∫ WebSocket —Å–µ—Ä–≤–µ—Ä–∞"""
        self.logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞")
        self.logger.info(f"üìç –•–æ—Å—Ç: {self.host}, –ü–æ—Ä—Ç: {self.port}")

        start_server = websockets.serve(
            self.handle_client, 
            self.host, 
            self.port,
            ping_interval=20,
            ping_timeout=10
        )
        
        async with start_server:
            self.logger.info("‚úÖ –°–µ—Ä–≤–µ—Ä —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
            await asyncio.Future()  # –≤–µ—á–Ω—ã–π —Ü–∏–∫–ª

if __name__ == "__main__":
    server = WebSocketRemoteServer()
    try:
        asyncio.run(server.start_server())
    except KeyboardInterrupt:
        print("\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")