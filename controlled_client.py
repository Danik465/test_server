import asyncio
import websockets
import json
import sys
import logging
import base64
import io
from PIL import ImageGrab, Image
import pyautogui
from datetime import datetime
import time

class RemoteControlledClient:
    def __init__(self):
        self.websocket = None
        self.client_id = f"controlled_{datetime.now().strftime('%H%M%S')}"
        self.connected = False
        self.screen_capturing = False
        self.mouse_control = False
        self.screen_task = None
        self.target_width = 1920
        self.target_height = 1080
        self.setup_logging()
        
    def setup_logging(self):
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler("controlled.log", encoding='utf-8'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger("RemoteControlled")

    def capture_screen(self):
        """–ó–∞—Ö–≤–∞—Ç –≤—Å–µ–≥–æ —ç–∫—Ä–∞–Ω–∞ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        try:
            # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—Å–µ–≥–æ —ç–∫—Ä–∞–Ω–∞
            screenshot = ImageGrab.grab()
            original_width, original_height = screenshot.size
            
            self.logger.debug(f"üñ•Ô∏è –ò—Å—Ö–æ–¥–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {original_width}x{original_height}")
            
            # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–∫, —á—Ç–æ–±—ã –í–ï–°–¨ —ç–∫—Ä–∞–Ω –ø–æ–º–µ—Å—Ç–∏–ª—Å—è –≤ 1920x1080
            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
            width_ratio = self.target_width / original_width
            height_ratio = self.target_height / original_height
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ú–ï–ù–¨–®–ò–ô –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç, —á—Ç–æ–±—ã –í–ï–°–¨ —ç–∫—Ä–∞–Ω –ø–æ–º–µ—Å—Ç–∏–ª—Å—è
            scale_ratio = min(width_ratio, height_ratio)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã
            new_width = int(original_width * scale_ratio)
            new_height = int(original_height * scale_ratio)
            
            # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
            resized_screenshot = screenshot.resize((new_width, new_height), Image.Resampling.LANCZOS)
            
            # –°–æ–∑–¥–∞–µ–º —á–µ—Ä–Ω—ã–π —Ñ–æ–Ω —Ü–µ–ª–µ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            final_image = Image.new('RGB', (self.target_width, self.target_height), (0, 0, 0))
            
            # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            x_offset = (self.target_width - new_width) // 2
            y_offset = (self.target_height - new_height) // 2
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ü–µ–Ω—Ç—Ä
            final_image.paste(resized_screenshot, (x_offset, y_offset))
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
            buffer = io.BytesIO()
            final_image.save(buffer, format='JPEG', quality=85, optimize=True)
            image_data = buffer.getvalue()
            
            self.logger.debug(f"üì∏ –í–µ—Å—å —ç–∫—Ä–∞–Ω –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω: {original_width}x{original_height} -> {new_width}x{new_height}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–∞–∫–∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –º—ã—à–∏
            return {
                'image_data': base64.b64encode(image_data).decode('utf-8'),
                'original_width': original_width,
                'original_height': original_height,
                'scaled_width': new_width,
                'scaled_height': new_height,
                'offset_x': x_offset,
                'offset_y': y_offset,
                'scale_ratio': scale_ratio
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ —ç–∫—Ä–∞–Ω–∞: {e}")
            import traceback
            self.logger.error(f"üîç –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {traceback.format_exc()}")
            return None

    async def send_screen_updates(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —ç–∫—Ä–∞–Ω–∞"""
        self.logger.info("üîÑ –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ–¥–∞—á–∏ –í–°–ï–ì–û —ç–∫—Ä–∞–Ω–∞")
        
        frame_count = 0
        start_time = time.time()
        
        while self.screen_capturing and self.connected:
            try:
                frame_start = time.time()
                
                capture_result = self.capture_screen()
                if capture_result and self.websocket:
                    await self.websocket.send(json.dumps({
                        "type": "screen_data",
                        "screen_data": capture_result['image_data'],
                        "original_width": capture_result['original_width'],
                        "original_height": capture_result['original_height'],
                        "scaled_width": capture_result['scaled_width'],
                        "scaled_height": capture_result['scaled_height'],
                        "offset_x": capture_result['offset_x'],
                        "offset_y": capture_result['offset_y'],
                        "scale_ratio": capture_result['scale_ratio'],
                        "timestamp": frame_start
                    }))
                    frame_count += 1
                    
                    if frame_count % 30 == 0:
                        elapsed = time.time() - start_time
                        fps = frame_count / elapsed
                        self.logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {frame_count} –∫–∞–¥—Ä–æ–≤, {fps:.1f} FPS")
                
                # –†–µ–≥—É–ª–∏—Ä—É–µ–º FPS
                elapsed_frame = time.time() - frame_start
                target_fps = 10
                sleep_time = max(1.0/target_fps - elapsed_frame, 0.01)
                await asyncio.sleep(sleep_time)
                    
            except asyncio.CancelledError:
                self.logger.info("üõë –ü–µ—Ä–µ–¥–∞—á–∞ —ç–∫—Ä–∞–Ω–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
                break
            except websockets.exceptions.ConnectionClosed:
                self.logger.warning("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –≤–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —ç–∫—Ä–∞–Ω–∞")
                break
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —ç–∫—Ä–∞–Ω–∞: {e}")
                await asyncio.sleep(0.5)

    async def execute_command(self, command, data=None):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –æ—Ç —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            self.logger.info(f"üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {command}")
            
            if command == "capture_screen":
                if not self.screen_capturing:
                    self.screen_capturing = True
                    self.screen_task = asyncio.create_task(self.send_screen_updates())
                    await self.send_status("–ó–∞—Ö–≤–∞—Ç –í–°–ï–ì–û —ç–∫—Ä–∞–Ω–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                    
            elif command == "stop_capture":
                if self.screen_capturing:
                    self.screen_capturing = False
                    if self.screen_task:
                        self.screen_task.cancel()
                        try:
                            await self.screen_task
                        except asyncio.CancelledError:
                            pass
                    await self.send_status("–ó–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    
            elif command == "toggle_mouse_control":
                self.mouse_control = not self.mouse_control
                status = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ" if self.mouse_control else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ"
                await self.send_status(f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à—å—é {status}")
                
            elif command == "mouse_move" and self.mouse_control:
                await self.handle_mouse_command("move", data)
                
            elif command == "mouse_click" and self.mouse_control:
                await self.handle_mouse_command("click", data)
                
            elif command == "mouse_down" and self.mouse_control:
                await self.handle_mouse_command("down", data)
                
            elif command == "mouse_up" and self.mouse_control:
                await self.handle_mouse_command("up", data)
                
            elif command == "key_press" and self.mouse_control:
                key = data['key']
                pyautogui.press(key, _pause=False)
                
            elif command == "key_down" and self.mouse_control:
                key = data['key']
                pyautogui.keyDown(key, _pause=False)
                
            elif command == "key_up" and self.mouse_control:
                key = data['key']
                pyautogui.keyUp(key, _pause=False)
                
            elif command == "type_write" and self.mouse_control:
                text = data['text']
                pyautogui.write(text, interval=0.01, _pause=False)
                
            else:
                if self.mouse_control:
                    await self.send_status(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {command}")
                else:
                    await self.send_status(f"–ö–æ–º–∞–Ω–¥–∞ {command} –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ)")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã {command}: {e}")
            await self.send_status(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")

    async def handle_mouse_command(self, action, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –º—ã—à–∏ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö
            scale_ratio = data.get('scale_ratio', 1.0)
            offset_x = data.get('offset_x', 0)
            offset_y = data.get('offset_y', 0)
            scaled_width = data.get('scaled_width', self.target_width)
            scaled_height = data.get('scaled_height', self.target_height)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
            remote_x = data['x']
            remote_y = data['y']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∫–ª–∏–∫ –≤ –æ–±–ª–∞—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–µ –≤ —á–µ—Ä–Ω—ã—Ö –ø–æ–ª–æ—Å–∞—Ö)
            if (remote_x < offset_x or remote_x >= offset_x + scaled_width or 
                remote_y < offset_y or remote_y >= offset_y + scaled_height):
                return  # –ö–ª–∏–∫ –≤ —á–µ—Ä–Ω—ã—Ö –ø–æ–ª–æ—Å–∞—Ö - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω—ã–µ
            local_x = int((remote_x - offset_x) / scale_ratio)
            local_y = int((remote_y - offset_y) / scale_ratio)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä–∞–Ω–∏—Ü
            screen_width, screen_height = pyautogui.size()
            local_x = max(0, min(local_x, screen_width - 1))
            local_y = max(0, min(local_y, screen_height - 1))
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            button = data.get('button', 'left')
            
            if action == "move":
                pyautogui.moveTo(local_x, local_y, _pause=False)
            elif action == "click":
                pyautogui.click(local_x, local_y, button=button, _pause=False)
            elif action == "down":
                pyautogui.mouseDown(local_x, local_y, button=button, _pause=False)
            elif action == "up":
                pyautogui.mouseUp(local_x, local_y, button=button, _pause=False)
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã –º—ã—à–∏: {e}")

    async def send_status(self, status_message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —É–ø—Ä–∞–≤–ª—è—é—â–µ–º—É"""
        if self.websocket and self.connected:
            try:
                await self.websocket.send(json.dumps({
                    "type": "status_update",
                    "status": "info",
                    "info": status_message
                }))
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")

    async def connect_to_server(self, uri, max_retries=5):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        for attempt in range(max_retries):
            try:
                self.logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {attempt + 1}/{max_retries} –∫ {uri}...")
                
                self.websocket = await websockets.connect(
                    uri,
                    ping_interval=30,
                    ping_timeout=10,
                    close_timeout=5,
                    max_size=10 * 1024 * 1024
                )
                
                await self.websocket.send(json.dumps({
                    "type": "controlled",
                    "client_id": self.client_id,
                    "resolution": f"{self.target_width}x{self.target_height}"
                }))
                
                message = await asyncio.wait_for(self.websocket.recv(), timeout=10.0)
                data = json.loads(message)
                
                if data.get("type") == "connection_established":
                    self.connected = True
                    self.logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                    await self.send_status("–£–ø—Ä–∞–≤–ª—è–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ (—Ä–µ–∂–∏–º: –í–ï–°–¨ —ç–∫—Ä–∞–Ω)")
                    return True
                    
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                if attempt < max_retries - 1:
                    await asyncio.sleep(2 ** attempt)
                    
        return False

    async def receive_commands(self):
        """–ü—Ä–∏–µ–º –∫–æ–º–∞–Ω–¥ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            async for message in self.websocket:
                data = json.loads(message)
                
                if data["type"] == "execute_command":
                    await self.execute_command(data["command"], data.get("data"))
                    
                elif data["type"] == "error":
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {data.get('message', '')}")
                    
        except websockets.exceptions.ConnectionClosed as e:
            self.logger.warning(f"üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –∑–∞–∫—Ä—ã—Ç–æ: {e}")
            self.connected = False
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥: {e}")
            self.connected = False

    async def start(self, uri):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∫–ª–∏–µ–Ω—Ç–∞"""
        if not await self.connect_to_server(uri):
            self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
            return
            
        print(f"\n‚úÖ –£–ø—Ä–∞–≤–ª—è–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç {self.client_id} –∑–∞–ø—É—â–µ–Ω")
        print("üñ•Ô∏è  –†–µ–∂–∏–º: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –í–°–ï–ì–û —ç–∫—Ä–∞–Ω–∞")
        print("üí° –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –±—É–¥—É—Ç –≤–∏–¥–Ω—ã")
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ü–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—à –∫–æ–º–ø—å—é—Ç–µ—Ä –±—É–¥–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —É–¥–∞–ª–µ–Ω–Ω–æ!")
        print("-" * 50)
        
        try:
            await self.receive_commands()
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
        finally:
            self.connected = False
            self.screen_capturing = False
            self.mouse_control = False
            
            if self.screen_task:
                self.screen_task.cancel()
                
            if self.websocket:
                await self.websocket.close()
                
        self.logger.info("üëã –£–ø—Ä–∞–≤–ª—è–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

def main():
    print("=== üñ•Ô∏è –£–ø—Ä–∞–≤–ª—è–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç ===")
    
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger("Main")
    
    try:
        if len(sys.argv) > 1:
            domain = sys.argv[1]
        else:
            domain = input("–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ 'local' –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ: ").strip()

        if domain.lower() == 'local':
            uri = "ws://127.0.0.1:8000"
            logger.info(f"üîß –õ–æ–∫–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {uri}")
        else:
            domain = domain.replace('http://', '').replace('https://', '').replace('ws://', '').replace('wss://', '')
            uri = f"wss://{domain}"
            logger.info(f"üåê –£–¥–∞–ª–µ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {uri}")

        client = RemoteControlledClient()
        asyncio.run(client.start(uri))
        
    except KeyboardInterrupt:
        logger.info("üõë –ö–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        print("\nüõë –ö–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()