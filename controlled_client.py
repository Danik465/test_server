import asyncio
import websockets
import json
import sys
import logging
import base64
import io
from PIL import ImageGrab
from datetime import datetime

class RemoteControlledClient:
    def __init__(self):
        self.websocket = None
        self.client_id = f"controlled_{datetime.now().strftime('%H%M%S')}"
        self.connected = False
        self.screen_capturing = False
        self.setup_logging()
        
    def setup_logging(self):
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler("controlled.log", encoding='utf-8'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger("RemoteControlled")

    def capture_screen(self):
        """–ó–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞ –∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ base64"""
        try:
            screenshot = ImageGrab.grab()
            buffer = io.BytesIO()
            screenshot.save(buffer, format='JPEG', quality=50)
            return base64.b64encode(buffer.getvalue()).decode('utf-8')
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ —ç–∫—Ä–∞–Ω–∞: {e}")
            return None

    async def send_screen_updates(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —ç–∫—Ä–∞–Ω–∞"""
        while self.screen_capturing and self.connected:
            try:
                screen_data = self.capture_screen()
                if screen_data and self.websocket:
                    await self.websocket.send(json.dumps({
                        "type": "screen_data",
                        "screen_data": screen_data
                    }))
                await asyncio.sleep(0.5)  # 2 FPS –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —ç–∫—Ä–∞–Ω–∞: {e}")
                break

    async def execute_command(self, command, data=None):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –æ—Ç —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            if command == "capture_screen":
                if not self.screen_capturing:
                    self.screen_capturing = True
                    asyncio.create_task(self.send_screen_updates())
                    await self.send_status("–ó–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                    
            elif command == "toggle_mouse_control":
                # –í —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É
                await self.send_status("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à—å—é –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ")
                
            else:
                await self.send_status(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {command}")
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã {command}: {e}")
            await self.send_status(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")

    async def send_status(self, status_message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —É–ø—Ä–∞–≤–ª—è—é—â–µ–º—É"""
        if self.websocket:
            await self.websocket.send(json.dumps({
                "type": "status_update",
                "status": "info",
                "info": status_message
            }))

    async def connect_to_server(self, uri):
        try:
            self.logger.info(f"üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {uri}...")
            self.websocket = await websockets.connect(
                uri,
                ping_interval=20,
                ping_timeout=10
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É–ø—Ä–∞–≤–ª—è–µ–º–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
            await self.websocket.send(json.dumps({
                "type": "controlled",
                "client_id": self.client_id
            }))
            
            # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            message = await self.websocket.recv()
            data = json.loads(message)
            
            if data.get("type") == "connection_established":
                self.connected = True
                self.logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                await self.send_status("–£–ø—Ä–∞–≤–ª—è–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
                return True
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False

    async def receive_commands(self):
        try:
            async for message in self.websocket:
                data = json.loads(message)
                
                if data["type"] == "execute_command":
                    await self.execute_command(data["command"], data.get("data"))
                    
                elif data["type"] == "error":
                    self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {data.get('message', '')}")
                    
        except websockets.exceptions.ConnectionClosed:
            self.logger.warning("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –∑–∞–∫—Ä—ã—Ç–æ")
            self.connected = False
            self.screen_capturing = False
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥: {e}")
            self.connected = False
            self.screen_capturing = False

    async def start(self, uri):
        if not await self.connect_to_server(uri):
            return
            
        print(f"\n‚úÖ –£–ø—Ä–∞–≤–ª—è–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç {self.client_id} –∑–∞–ø—É—â–µ–Ω")
        print("üí° –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –æ—Ç —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞...")
        print("-" * 50)
        
        try:
            await self.receive_commands()
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
        finally:
            self.connected = False
            self.screen_capturing = False
            if self.websocket:
                await self.websocket.close()
                
        self.logger.info("üëã –£–ø—Ä–∞–≤–ª—è–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

def main():
    print("=== üñ•Ô∏è –£–ø—Ä–∞–≤–ª—è–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç ===")
    
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger("Main")
    
    try:
        if len(sys.argv) > 1:
            domain = sys.argv[1]
        else:
            domain = input("–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ 'local' –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ: ").strip()

        if domain.lower() == 'local':
            uri = "ws://127.0.0.1:8000"
            logger.info(f"üîß –õ–æ–∫–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {uri}")
        else:
            domain = domain.replace('http://', '').replace('https://', '').replace('ws://', '').replace('wss://', '')
            uri = f"wss://{domain}"
            logger.info(f"üåê –£–¥–∞–ª–µ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {uri}")

        client = RemoteControlledClient()
        asyncio.run(client.start(uri))
        
    except KeyboardInterrupt:
        logger.info("üõë –ö–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        print("\nüõë –ö–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()