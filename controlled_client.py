import asyncio
import websockets
import json
import sys
import logging
import base64
import io
from PIL import ImageGrab, Image
import pyautogui
from datetime import datetime
import time

class RemoteControlledClient:
    def __init__(self):
        self.websocket = None
        self.client_id = f"controlled_{datetime.now().strftime('%H%M%S')}"
        self.connected = False
        self.screen_capturing = False
        self.mouse_control = False
        self.screen_task = None
        self.setup_logging()
        
    def setup_logging(self):
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler("controlled.log", encoding='utf-8'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger("RemoteControlled")

    def capture_screen(self):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∑–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞"""
        try:
            # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
            screenshot = ImageGrab.grab()
            
            # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            screenshot.thumbnail((800, 600), Image.Resampling.LANCZOS)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64 - –∏—Å–ø–æ–ª—å–∑—É–µ–º PNG –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
            buffer = io.BytesIO()
            screenshot.save(buffer, format='PNG')  # PNG –≤–º–µ—Å—Ç–æ JPEG
            image_data = buffer.getvalue()
            
            self.logger.debug(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –∑–∞—Ö–≤–∞—á–µ–Ω, —Ä–∞–∑–º–µ—Ä: {len(image_data)} –±–∞–π—Ç")
            return base64.b64encode(image_data).decode('utf-8')
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ —ç–∫—Ä–∞–Ω–∞: {e}")
            return None

    async def send_screen_updates(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —ç–∫—Ä–∞–Ω–∞"""
        self.logger.info("üîÑ –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ–¥–∞—á–∏ —ç–∫—Ä–∞–Ω–∞")
        
        while self.screen_capturing and self.connected:
            try:
                start_time = time.time()
                
                screen_data = self.capture_screen()
                if screen_data and self.websocket:
                    await self.websocket.send(json.dumps({
                        "type": "screen_data",
                        "screen_data": screen_data,
                        "timestamp": start_time
                    }))
                    self.logger.debug(f"‚úÖ –ö–∞–¥—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, —Ä–∞–∑–º–µ—Ä: {len(screen_data)}")
                elif not screen_data:
                    self.logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ö–≤–∞—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω")
                
                # –ë–∞–ª–∞–Ω—Å FPS - 5 –∫–∞–¥—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                elapsed = time.time() - start_time
                sleep_time = max(0.2 - elapsed, 0.01)  # 5 FPS
                await asyncio.sleep(sleep_time)
                    
            except asyncio.CancelledError:
                self.logger.info("üõë –ü–µ—Ä–µ–¥–∞—á–∞ —ç–∫—Ä–∞–Ω–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
                break
            except websockets.exceptions.ConnectionClosed:
                self.logger.warning("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –≤–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —ç–∫—Ä–∞–Ω–∞")
                break
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —ç–∫—Ä–∞–Ω–∞: {e}")
                await asyncio.sleep(0.5)

    async def execute_command(self, command, data=None):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –æ—Ç —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            self.logger.info(f"üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {command}")
            
            if command == "capture_screen":
                if not self.screen_capturing:
                    self.screen_capturing = True
                    self.screen_task = asyncio.create_task(self.send_screen_updates())
                    await self.send_status("–ó–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                    
            elif command == "stop_capture":
                if self.screen_capturing:
                    self.screen_capturing = False
                    if self.screen_task:
                        self.screen_task.cancel()
                        try:
                            await self.screen_task
                        except asyncio.CancelledError:
                            pass
                    await self.send_status("–ó–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    
            elif command == "toggle_mouse_control":
                self.mouse_control = not self.mouse_control
                status = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ" if self.mouse_control else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ"
                await self.send_status(f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à—å—é {status}")
                
            elif command == "mouse_move" and self.mouse_control:
                screen_width, screen_height = pyautogui.size()
                scale_x = screen_width / 800
                scale_y = screen_height / 600
                
                x = int(data['x'] * scale_x)
                y = int(data['y'] * scale_y)
                
                pyautogui.moveTo(x, y, _pause=False)
                
            elif command == "mouse_click" and self.mouse_control:
                screen_width, screen_height = pyautogui.size()
                scale_x = screen_width / 800
                scale_y = screen_height / 600
                
                x = int(data['x'] * scale_x)
                y = int(data['y'] * scale_y)
                button = data.get('button', 'left')
                
                pyautogui.click(x, y, button=button, _pause=False)
                
            elif command == "mouse_down" and self.mouse_control:
                screen_width, screen_height = pyautogui.size()
                scale_x = screen_width / 800
                scale_y = screen_height / 600
                
                x = int(data['x'] * scale_x)
                y = int(data['y'] * scale_y)
                button = data.get('button', 'left')
                
                pyautogui.mouseDown(x, y, button=button, _pause=False)
                
            elif command == "mouse_up" and self.mouse_control:
                screen_width, screen_height = pyautogui.size()
                scale_x = screen_width / 800
                scale_y = screen_height / 600
                
                x = int(data['x'] * scale_x)
                y = int(data['y'] * scale_y)
                button = data.get('button', 'left')
                
                pyautogui.mouseUp(x, y, button=button, _pause=False)
                
            elif command == "key_press" and self.mouse_control:
                key = data['key']
                pyautogui.press(key, _pause=False)
                
            elif command == "key_down" and self.mouse_control:
                key = data['key']
                pyautogui.keyDown(key, _pause=False)
                
            elif command == "key_up" and self.mouse_control:
                key = data['key']
                pyautogui.keyUp(key, _pause=False)
                
            elif command == "type_write" and self.mouse_control:
                text = data['text']
                pyautogui.write(text, interval=0.01, _pause=False)
                
            else:
                if self.mouse_control:
                    await self.send_status(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {command}")
                else:
                    await self.send_status(f"–ö–æ–º–∞–Ω–¥–∞ {command} –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ)")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã {command}: {e}")
            await self.send_status(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")

    async def send_status(self, status_message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —É–ø—Ä–∞–≤–ª—è—é—â–µ–º—É"""
        if self.websocket and self.connected:
            try:
                await self.websocket.send(json.dumps({
                    "type": "status_update",
                    "status": "info",
                    "info": status_message
                }))
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")

    async def connect_to_server(self, uri, max_retries=5):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        for attempt in range(max_retries):
            try:
                self.logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {attempt + 1}/{max_retries} –∫ {uri}...")
                
                self.websocket = await websockets.connect(
                    uri,
                    ping_interval=30,
                    ping_timeout=10,
                    close_timeout=5,
                    max_size=10 * 1024 * 1024  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
                await self.websocket.send(json.dumps({
                    "type": "controlled",
                    "client_id": self.client_id
                }))
                
                # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                message = await asyncio.wait_for(self.websocket.recv(), timeout=10.0)
                data = json.loads(message)
                
                if data.get("type") == "connection_established":
                    self.connected = True
                    self.logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                    await self.send_status("–£–ø—Ä–∞–≤–ª—è–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
                    return True
                    
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                if attempt < max_retries - 1:
                    await asyncio.sleep(2 ** attempt)
                    
        return False

    async def receive_commands(self):
        """–ü—Ä–∏–µ–º –∫–æ–º–∞–Ω–¥ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            async for message in self.websocket:
                data = json.loads(message)
                
                if data["type"] == "execute_command":
                    await self.execute_command(data["command"], data.get("data"))
                    
                elif data["type"] == "error":
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {data.get('message', '')}")
                    
        except websockets.exceptions.ConnectionClosed as e:
            self.logger.warning(f"üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –∑–∞–∫—Ä—ã—Ç–æ: {e}")
            self.connected = False
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥: {e}")
            self.connected = False

    async def start(self, uri):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∫–ª–∏–µ–Ω—Ç–∞"""
        if not await self.connect_to_server(uri):
            self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
            return
            
        print(f"\n‚úÖ –£–ø—Ä–∞–≤–ª—è–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç {self.client_id} –∑–∞–ø—É—â–µ–Ω")
        print("üí° –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –æ—Ç —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞...")
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ü–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—à –∫–æ–º–ø—å—é—Ç–µ—Ä –±—É–¥–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —É–¥–∞–ª–µ–Ω–Ω–æ!")
        print("-" * 50)
        
        try:
            await self.receive_commands()
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
        finally:
            # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
            self.connected = False
            self.screen_capturing = False
            self.mouse_control = False
            
            if self.screen_task:
                self.screen_task.cancel()
                
            if self.websocket:
                await self.websocket.close()
                
        self.logger.info("üëã –£–ø—Ä–∞–≤–ª—è–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

def main():
    print("=== üñ•Ô∏è –£–ø—Ä–∞–≤–ª—è–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç ===")
    
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger("Main")
    
    try:
        if len(sys.argv) > 1:
            domain = sys.argv[1]
        else:
            domain = input("–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ 'local' –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ: ").strip()

        if domain.lower() == 'local':
            uri = "ws://127.0.0.1:8000"
            logger.info(f"üîß –õ–æ–∫–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {uri}")
        else:
            domain = domain.replace('http://', '').replace('https://', '').replace('ws://', '').replace('wss://', '')
            uri = f"wss://{domain}"
            logger.info(f"üåê –£–¥–∞–ª–µ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {uri}")

        client = RemoteControlledClient()
        asyncio.run(client.start(uri))
        
    except KeyboardInterrupt:
        logger.info("üõë –ö–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        print("\nüõë –ö–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()